#!/usr/bin/env python3
# Use this code snippet in your app.
# If you need more information about configurations or implementing the sample code, visit the AWS docs:   
# https://aws.amazon.com/developers/getting-started/python/

import boto3
import base64
import argparse
import json
from botocore.exceptions import ClientError


def get_secret(region, name, old):
    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    if old:
      version = 'AWSPREVIOUS'
    else:
      version = 'AWSCURRENT'

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=name,
            VersionStage=version
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            print('Resource Not Found for: '+ name)
    else:
        # Decrypts secret using the associated KMS key.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = json.loads(get_secret_value_response['SecretString'])
            return secret
        else:
            decoded_binary_secret = json.loads(base64.b64decode(get_secret_value_response['SecretBinary']))
            return decoded_binary_secret
    # Your code goes here.


def print_db_secret(args):
    if args.secret:
        output = get_secret(args.region, args.secret, args.old)
        if ('password' and 'username' in output) and ('host' or 'engine' in output ):
            print("======= " + args.secret + " =======")
            if ('host' in output):
              print('host: ' + output['host'])
            print('username: ' + output['username'])
            print('password: ' + output['password'])
            if ('engine' in output):
              print('engine: ' + output['engine'])
    else:
        parser.print_help()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="print_secret", description="Display secrets")
    parser.add_argument('--print', '-p', help="Display secret (default)",
                        action="store_true", default=False)
    parser.add_argument(
        '--region', '-r', help="aws region", default='us-west-2')
    parser.add_argument(
        '--secret', '-s', help="Name of the secret", default=None)
    parser.add_argument(
        '--old', '-o', help="Previous version of secret", action="store_true", default=False)
    args = parser.parse_args()
    print_db_secret(args)


